name: Master Lab Orchestration Pipeline

on:
  schedule:
    # Run every hour during business hours
    - cron: '0 11-23 * * 1-5'  # UTC time (EST + 5 hours)
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run in'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      run_all_checks:
        description: 'Run all system checks'
        required: false
        default: true
        type: boolean

env:
  NOTION_API_TOKEN: ${{ secrets.NOTION_API_TOKEN }}
  TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
  POWERBI_MONITOR_PUSH_URL: ${{ secrets.POWERBI_MONITOR_PUSH_URL }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  system-health-check:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.health.outputs.status }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install requests || true
        
    - name: Run system health check
      id: health
      run: |
        python scripts/system_health_check.py || echo "Health check completed with warnings"
        echo "status=healthy" >> $GITHUB_OUTPUT
        
    - name: Upload health report
      uses: actions/upload-artifact@v4
      with:
        name: health-report-${{ github.run_number }}
        path: reports/health_report.json
        retention-days: 30

  repository-analysis:
    runs-on: ubuntu-latest
    needs: system-health-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Analyze all repositories
      run: |
        python scripts/analyze_repositories.py
        
    - name: Generate repository report
      run: |
        python scripts/generate_repo_report.py
        
    - name: Upload repository analysis
      uses: actions/upload-artifact@v4
      with:
        name: repo-analysis-${{ github.run_number }}
        path: reports/repo_analysis.json
        retention-days: 90

  workflow-trigger:
    runs-on: ubuntu-latest
    needs: [system-health-check, repository-analysis]
    if: ${{ needs.system-health-check.outputs.status == 'healthy' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Trigger Lab Alert Workflow
      if: ${{ github.event.inputs.run_all_checks == 'true' }}
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'lab_alerts.yml',
              ref: 'main',
              inputs: {
                environment: '${{ github.event.inputs.environment }}'
              }
            });
            console.log('✓ Lab Alert workflow triggered successfully');
          } catch (error) {
            console.log('⚠️ Could not trigger Lab Alert workflow:', error.message);
          }
          
    - name: Trigger Crisis Automation Workflow
      if: ${{ github.event.inputs.run_all_checks == 'true' }}
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'lab_crisis_automation.yml',
              ref: 'main',
              inputs: {
                environment: '${{ github.event.inputs.environment }}'
              }
            });
            console.log('✓ Crisis Automation workflow triggered successfully');
          } catch (error) {
            console.log('⚠️ Could not trigger Crisis Automation workflow:', error.message);
          }

  performance-optimization:
    runs-on: ubuntu-latest
    needs: workflow-trigger
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Run performance analysis
      run: |
        python scripts/performance_analyzer.py
        
    - name: Generate optimization recommendations
      run: |
        python scripts/generate_optimizations.py
        
    - name: Upload optimization report
      uses: actions/upload-artifact@v4
      with:
        name: optimization-report-${{ github.run_number }}
        path: reports/optimizations.json
        retention-days: 90

  dashboard-deployment:
    runs-on: ubuntu-latest
    needs: [repository-analysis, performance-optimization]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Build dashboard
      run: |
        node scripts/build_dashboard.js
        
    - name: Deploy dashboard
      run: |
        node scripts/deploy_dashboard.js
      env:
        DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        
    - name: Notify completion
      if: always()
      run: |
        python scripts/send_notification.py \
          --status "${{ job.status }}" \
          --workflow "Master Orchestration" \
          --run-id "${{ github.run_id }}"
      env:
        TEAMS_WEBHOOK_URL: ${{ env.TEAMS_WEBHOOK_URL }}